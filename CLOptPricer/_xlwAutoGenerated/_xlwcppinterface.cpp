//// 
//// Autogenerated by xlw 
//// Do not edit this file, it will be overwritten 
//// by InterfaceGenerator 
////

#include "xlw/MyContainers.h"
#include <xlw/CellMatrix.h>
#include "..\cppinterface.h"
#include <xlw/xlw.h>
#include <xlw/XlFunctionRegistration.h>
#include <stdexcept>
#include <xlw/XlOpenClose.h>
#include <xlw/HiResTimer.h>
using namespace xlw;

namespace {
const char* LibraryName = "MyTestLibrary";
};


// registrations start here


namespace
{
XLRegistration::Arg
CLFitDelta5VolParamsArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dexp","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strikeList","too lazy to comment this one ","XLF_OPER"},
{ "volList","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerCLFitDelta5VolParams("xlCLFitDelta5VolParams",
"CLFitDelta5VolParams",
"too lazy to comment this function ",
LibraryName,
CLFitDelta5VolParamsArgs,
5
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlCLFitDelta5VolParams(
double dtoday,
double dexp,
double fwd,
LPXLFOPER strikeLista,
LPXLFOPER volLista)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);




XlfOper strikeListb(
	(strikeLista));
MyArray strikeList(
	strikeListb.AsArray("strikeList"));

XlfOper volListb(
	(volLista));
MyArray volList(
	volListb.AsArray("volList"));

MyArray result(
	CLFitDelta5VolParams(
		dtoday,
		dexp,
		fwd,
		strikeList,
		volList)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
CLSmileVolbyStrikeArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dexp","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "atm","too lazy to comment this one ","B"},
{ "v90","too lazy to comment this one ","B"},
{ "v75","too lazy to comment this one ","B"},
{ "v25","too lazy to comment this one ","B"},
{ "v10","too lazy to comment this one ","B"},
{ "K","too lazy to comment this one ","B"},
{ "accrual","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerCLSmileVolbyStrike("xlCLSmileVolbyStrike",
"CLSmileVolbyStrike",
"too lazy to comment this function ",
LibraryName,
CLSmileVolbyStrikeArgs,
10
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlCLSmileVolbyStrike(
double dtoday,
double dexp,
double fwd,
double atm,
double v90,
double v75,
double v25,
double v10,
double K,
LPXLFOPER accruala)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);










XlfOper accrualb(
	(accruala));
std::string accrual(
	accrualb.AsString("accrual"));

double result(
	CLSmileVolbyStrike(
		dtoday,
		dexp,
		fwd,
		atm,
		v90,
		v75,
		v25,
		v10,
		K,
		accrual)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
CLSmileVolbyDeltaArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dexp","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "atm","too lazy to comment this one ","B"},
{ "v90","too lazy to comment this one ","B"},
{ "v75","too lazy to comment this one ","B"},
{ "v25","too lazy to comment this one ","B"},
{ "v10","too lazy to comment this one ","B"},
{ "delta","too lazy to comment this one ","B"},
{ "accrual","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerCLSmileVolbyDelta("xlCLSmileVolbyDelta",
"CLSmileVolbyDelta",
"too lazy to comment this function ",
LibraryName,
CLSmileVolbyDeltaArgs,
10
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlCLSmileVolbyDelta(
double dtoday,
double dexp,
double fwd,
double atm,
double v90,
double v75,
double v25,
double v10,
double delta,
LPXLFOPER accruala)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);










XlfOper accrualb(
	(accruala));
std::string accrual(
	accrualb.AsString("accrual"));

double result(
	CLSmileVolbyDelta(
		dtoday,
		dexp,
		fwd,
		atm,
		v90,
		v75,
		v25,
		v10,
		delta,
		accrual)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
CLSmileEuroOptPricerArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dexp","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "atm","too lazy to comment this one ","B"},
{ "v90","too lazy to comment this one ","B"},
{ "v75","too lazy to comment this one ","B"},
{ "v25","too lazy to comment this one ","B"},
{ "v10","too lazy to comment this one ","B"},
{ "doptexp","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "outflag","too lazy to comment this one ","XLF_OPER"},
{ "alpha","too lazy to comment this one ","B"},
{ "beta","too lazy to comment this one ","B"},
{ "accrual","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerCLSmileEuroOptPricer("xlCLSmileEuroOptPricer",
"CLSmileEuroOptPricer",
"too lazy to comment this function ",
LibraryName,
CLSmileEuroOptPricerArgs,
16
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlCLSmileEuroOptPricer(
double dtoday,
double dexp,
double fwd,
double strike,
double atm,
double v90,
double v75,
double v25,
double v10,
double doptexp,
double ir,
LPXLFOPER otypea,
LPXLFOPER outflaga,
double alpha,
double beta,
LPXLFOPER accruala)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);












XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

XlfOper outflagb(
	(outflaga));
std::string outflag(
	outflagb.AsString("outflag"));



XlfOper accrualb(
	(accruala));
std::string accrual(
	accrualb.AsString("accrual"));

double result(
	CLSmileEuroOptPricer(
		dtoday,
		dexp,
		fwd,
		strike,
		atm,
		v90,
		v75,
		v25,
		v10,
		doptexp,
		ir,
		otype,
		outflag,
		alpha,
		beta,
		accrual)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
CLEuroOptStripArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dstart","too lazy to comment this one ","B"},
{ "dend","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "atm","too lazy to comment this one ","B"},
{ "v90","too lazy to comment this one ","B"},
{ "v75","too lazy to comment this one ","B"},
{ "v25","too lazy to comment this one ","B"},
{ "v10","too lazy to comment this one ","B"},
{ "doptexp","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "outflag","too lazy to comment this one ","XLF_OPER"},
{ "hols","too lazy to comment this one ","XLF_OPER"},
{ "alpha","too lazy to comment this one ","B"},
{ "beta","too lazy to comment this one ","B"},
{ "accrual","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerCLEuroOptStrip("xlCLEuroOptStrip",
"CLEuroOptStrip",
"too lazy to comment this function ",
LibraryName,
CLEuroOptStripArgs,
18
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlCLEuroOptStrip(
double dtoday,
double dstart,
double dend,
double fwd,
double strike,
double atm,
double v90,
double v75,
double v25,
double v10,
double doptexp,
double ir,
LPXLFOPER otypea,
LPXLFOPER outflaga,
LPXLFOPER holsa,
double alpha,
double beta,
LPXLFOPER accruala)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);













XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

XlfOper outflagb(
	(outflaga));
std::string outflag(
	outflagb.AsString("outflag"));

XlfOper holsb(
	(holsa));
MyArray hols(
	holsb.AsArray("hols"));



XlfOper accrualb(
	(accruala));
std::string accrual(
	accrualb.AsString("accrual"));

double result(
	CLEuroOptStrip(
		dtoday,
		dstart,
		dend,
		fwd,
		strike,
		atm,
		v90,
		v75,
		v25,
		v10,
		doptexp,
		ir,
		otype,
		outflag,
		hols,
		alpha,
		beta,
		accrual)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
CLSmileBinOptPricerArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dexp","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "atm","too lazy to comment this one ","B"},
{ "v90","too lazy to comment this one ","B"},
{ "v75","too lazy to comment this one ","B"},
{ "v25","too lazy to comment this one ","B"},
{ "v10","too lazy to comment this one ","B"},
{ "doptexp","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "outflag","too lazy to comment this one ","XLF_OPER"},
{ "alpha","too lazy to comment this one ","B"},
{ "beta","too lazy to comment this one ","B"},
{ "accrual","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerCLSmileBinOptPricer("xlCLSmileBinOptPricer",
"CLSmileBinOptPricer",
"too lazy to comment this function ",
LibraryName,
CLSmileBinOptPricerArgs,
16
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlCLSmileBinOptPricer(
double dtoday,
double dexp,
double fwd,
double strike,
double atm,
double v90,
double v75,
double v25,
double v10,
double doptexp,
double ir,
LPXLFOPER otypea,
LPXLFOPER outflaga,
double alpha,
double beta,
LPXLFOPER accruala)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);












XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

XlfOper outflagb(
	(outflaga));
std::string outflag(
	outflagb.AsString("outflag"));



XlfOper accrualb(
	(accruala));
std::string accrual(
	accrualb.AsString("accrual"));

double result(
	CLSmileBinOptPricer(
		dtoday,
		dexp,
		fwd,
		strike,
		atm,
		v90,
		v75,
		v25,
		v10,
		doptexp,
		ir,
		otype,
		outflag,
		alpha,
		beta,
		accrual)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
CLDigitalStripArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dstart","too lazy to comment this one ","B"},
{ "dend","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "atm","too lazy to comment this one ","B"},
{ "v90","too lazy to comment this one ","B"},
{ "v75","too lazy to comment this one ","B"},
{ "v25","too lazy to comment this one ","B"},
{ "v10","too lazy to comment this one ","B"},
{ "doptexp","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "outflag","too lazy to comment this one ","XLF_OPER"},
{ "hols","too lazy to comment this one ","XLF_OPER"},
{ "alpha","too lazy to comment this one ","B"},
{ "beta","too lazy to comment this one ","B"},
{ "accrual","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerCLDigitalStrip("xlCLDigitalStrip",
"CLDigitalStrip",
"too lazy to comment this function ",
LibraryName,
CLDigitalStripArgs,
18
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlCLDigitalStrip(
double dtoday,
double dstart,
double dend,
double fwd,
double strike,
double atm,
double v90,
double v75,
double v25,
double v10,
double doptexp,
double ir,
LPXLFOPER otypea,
LPXLFOPER outflaga,
LPXLFOPER holsa,
double alpha,
double beta,
LPXLFOPER accruala)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);













XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

XlfOper outflagb(
	(outflaga));
std::string outflag(
	outflagb.AsString("outflag"));

XlfOper holsb(
	(holsa));
MyArray hols(
	holsb.AsArray("hols"));



XlfOper accrualb(
	(accruala));
std::string accrual(
	accrualb.AsString("accrual"));

double result(
	CLDigitalStrip(
		dtoday,
		dstart,
		dend,
		fwd,
		strike,
		atm,
		v90,
		v75,
		v25,
		v10,
		doptexp,
		ir,
		otype,
		outflag,
		hols,
		alpha,
		beta,
		accrual)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
CLSprdOptPricerArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dexp","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "atm","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "outflag","too lazy to comment this one ","XLF_OPER"},
{ "accrual","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerCLSprdOptPricer("xlCLSprdOptPricer",
"CLSprdOptPricer",
"too lazy to comment this function ",
LibraryName,
CLSprdOptPricerArgs,
9
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlCLSprdOptPricer(
double dtoday,
double dexp,
double fwd,
double strike,
double atm,
double ir,
LPXLFOPER otypea,
LPXLFOPER outflaga,
LPXLFOPER accruala)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);







XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

XlfOper outflagb(
	(outflaga));
std::string outflag(
	outflagb.AsString("outflag"));

XlfOper accrualb(
	(accruala));
std::string accrual(
	accrualb.AsString("accrual"));

double result(
	CLSprdOptPricer(
		dtoday,
		dexp,
		fwd,
		strike,
		atm,
		ir,
		otype,
		outflag,
		accrual)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
CLBlackImpliedVolArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dexp","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "optPrice","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerCLBlackImpliedVol("xlCLBlackImpliedVol",
"CLBlackImpliedVol",
"too lazy to comment this function ",
LibraryName,
CLBlackImpliedVolArgs,
7
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlCLBlackImpliedVol(
double dtoday,
double dexp,
double fwd,
double strike,
double ir,
LPXLFOPER otypea,
double optPrice)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);






XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));


double result(
	CLBlackImpliedVol(
		dtoday,
		dexp,
		fwd,
		strike,
		ir,
		otype,
		optPrice)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
CLBachelierImpliedVolArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dexp","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "prem","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerCLBachelierImpliedVol("xlCLBachelierImpliedVol",
"CLBachelierImpliedVol",
"too lazy to comment this function ",
LibraryName,
CLBachelierImpliedVolArgs,
7
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlCLBachelierImpliedVol(
double dtoday,
double dexp,
double fwd,
double strike,
double ir,
LPXLFOPER otypea,
double prem)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);






XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));


double result(
	CLBachelierImpliedVol(
		dtoday,
		dexp,
		fwd,
		strike,
		ir,
		otype,
		prem)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
CLBlackDeltaArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dexp","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "vol","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerCLBlackDelta("xlCLBlackDelta",
"CLBlackDelta",
"too lazy to comment this function ",
LibraryName,
CLBlackDeltaArgs,
7
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlCLBlackDelta(
double dtoday,
double dexp,
double fwd,
double strike,
double vol,
double ir,
LPXLFOPER otypea)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);







XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

double result(
	CLBlackDelta(
		dtoday,
		dexp,
		fwd,
		strike,
		vol,
		ir,
		otype)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
CLBarrierFlatVolPricerArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dexp","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "barrier","too lazy to comment this one ","B"},
{ "btype","too lazy to comment this one ","XLF_OPER"},
{ "atm","too lazy to comment this one ","B"},
{ "doptexp","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "mtype","too lazy to comment this one ","XLF_OPER"},
{ "outflag","too lazy to comment this one ","XLF_OPER"},
{ "alpha","too lazy to comment this one ","B"},
{ "beta","too lazy to comment this one ","B"},
{ "accrual","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerCLBarrierFlatVolPricer("xlCLBarrierFlatVolPricer",
"CLBarrierFlatVolPricer",
"too lazy to comment this function ",
LibraryName,
CLBarrierFlatVolPricerArgs,
15
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlCLBarrierFlatVolPricer(
double dtoday,
double dexp,
double fwd,
double strike,
double barrier,
LPXLFOPER btypea,
double atm,
double doptexp,
double ir,
LPXLFOPER otypea,
LPXLFOPER mtypea,
LPXLFOPER outflaga,
double alpha,
double beta,
LPXLFOPER accruala)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);






XlfOper btypeb(
	(btypea));
std::string btype(
	btypeb.AsString("btype"));




XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

XlfOper mtypeb(
	(mtypea));
std::string mtype(
	mtypeb.AsString("mtype"));

XlfOper outflagb(
	(outflaga));
std::string outflag(
	outflagb.AsString("outflag"));



XlfOper accrualb(
	(accruala));
std::string accrual(
	accrualb.AsString("accrual"));

double result(
	CLBarrierFlatVolPricer(
		dtoday,
		dexp,
		fwd,
		strike,
		barrier,
		btype,
		atm,
		doptexp,
		ir,
		otype,
		mtype,
		outflag,
		alpha,
		beta,
		accrual)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
CLBarrierSmilePricerArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dexp","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "barrier","too lazy to comment this one ","B"},
{ "btype","too lazy to comment this one ","XLF_OPER"},
{ "atm","too lazy to comment this one ","B"},
{ "v90","too lazy to comment this one ","B"},
{ "v75","too lazy to comment this one ","B"},
{ "v25","too lazy to comment this one ","B"},
{ "v10","too lazy to comment this one ","B"},
{ "doptexp","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "mtype","too lazy to comment this one ","XLF_OPER"},
{ "outflag","too lazy to comment this one ","XLF_OPER"},
{ "alpha","too lazy to comment this one ","B"},
{ "beta","too lazy to comment this one ","B"},
{ "accrual","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerCLBarrierSmilePricer("xlCLBarrierSmilePricer",
"CLBarrierSmilePricer",
"too lazy to comment this function ",
LibraryName,
CLBarrierSmilePricerArgs,
19
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlCLBarrierSmilePricer(
double dtoday,
double dexp,
double fwd,
double strike,
double barrier,
LPXLFOPER btypea,
double atm,
double v90,
double v75,
double v25,
double v10,
double doptexp,
double ir,
LPXLFOPER otypea,
LPXLFOPER mtypea,
LPXLFOPER outflaga,
double alpha,
double beta,
LPXLFOPER accruala)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);






XlfOper btypeb(
	(btypea));
std::string btype(
	btypeb.AsString("btype"));








XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

XlfOper mtypeb(
	(mtypea));
std::string mtype(
	mtypeb.AsString("mtype"));

XlfOper outflagb(
	(outflaga));
std::string outflag(
	outflagb.AsString("outflag"));



XlfOper accrualb(
	(accruala));
std::string accrual(
	accrualb.AsString("accrual"));

double result(
	CLBarrierSmilePricer(
		dtoday,
		dexp,
		fwd,
		strike,
		barrier,
		btype,
		atm,
		v90,
		v75,
		v25,
		v10,
		doptexp,
		ir,
		otype,
		mtype,
		outflag,
		alpha,
		beta,
		accrual)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
CLBarrierStripArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dstart","too lazy to comment this one ","B"},
{ "dend","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "barrier","too lazy to comment this one ","B"},
{ "btype","too lazy to comment this one ","XLF_OPER"},
{ "atm","too lazy to comment this one ","B"},
{ "doptexp","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "mtype","too lazy to comment this one ","XLF_OPER"},
{ "outflag","too lazy to comment this one ","XLF_OPER"},
{ "hols","too lazy to comment this one ","XLF_OPER"},
{ "alpha","too lazy to comment this one ","B"},
{ "beta","too lazy to comment this one ","B"},
{ "accrual","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerCLBarrierStrip("xlCLBarrierStrip",
"CLBarrierStrip",
"too lazy to comment this function ",
LibraryName,
CLBarrierStripArgs,
17
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlCLBarrierStrip(
double dtoday,
double dstart,
double dend,
double fwd,
double strike,
double barrier,
LPXLFOPER btypea,
double atm,
double doptexp,
double ir,
LPXLFOPER otypea,
LPXLFOPER mtypea,
LPXLFOPER outflaga,
LPXLFOPER holsa,
double alpha,
double beta,
LPXLFOPER accruala)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);







XlfOper btypeb(
	(btypea));
std::string btype(
	btypeb.AsString("btype"));




XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

XlfOper mtypeb(
	(mtypea));
std::string mtype(
	mtypeb.AsString("mtype"));

XlfOper outflagb(
	(outflaga));
std::string outflag(
	outflagb.AsString("outflag"));

XlfOper holsb(
	(holsa));
MyArray hols(
	holsb.AsArray("hols"));



XlfOper accrualb(
	(accruala));
std::string accrual(
	accrualb.AsString("accrual"));

double result(
	CLBarrierStrip(
		dtoday,
		dstart,
		dend,
		fwd,
		strike,
		barrier,
		btype,
		atm,
		doptexp,
		ir,
		otype,
		mtype,
		outflag,
		hols,
		alpha,
		beta,
		accrual)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
CLBarrierSmileStripArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dstart","too lazy to comment this one ","B"},
{ "dend","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "barrier","too lazy to comment this one ","B"},
{ "btype","too lazy to comment this one ","XLF_OPER"},
{ "atm","too lazy to comment this one ","B"},
{ "v90","too lazy to comment this one ","B"},
{ "v75","too lazy to comment this one ","B"},
{ "v25","too lazy to comment this one ","B"},
{ "v10","too lazy to comment this one ","B"},
{ "doptexp","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "mtype","too lazy to comment this one ","XLF_OPER"},
{ "outflag","too lazy to comment this one ","XLF_OPER"},
{ "hols","too lazy to comment this one ","XLF_OPER"},
{ "alpha","too lazy to comment this one ","B"},
{ "beta","too lazy to comment this one ","B"},
{ "accrual","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerCLBarrierSmileStrip("xlCLBarrierSmileStrip",
"CLBarrierSmileStrip",
"too lazy to comment this function ",
LibraryName,
CLBarrierSmileStripArgs,
21
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlCLBarrierSmileStrip(
double dtoday,
double dstart,
double dend,
double fwd,
double strike,
double barrier,
LPXLFOPER btypea,
double atm,
double v90,
double v75,
double v25,
double v10,
double doptexp,
double ir,
LPXLFOPER otypea,
LPXLFOPER mtypea,
LPXLFOPER outflaga,
LPXLFOPER holsa,
double alpha,
double beta,
LPXLFOPER accruala)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);







XlfOper btypeb(
	(btypea));
std::string btype(
	btypeb.AsString("btype"));








XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

XlfOper mtypeb(
	(mtypea));
std::string mtype(
	mtypeb.AsString("mtype"));

XlfOper outflagb(
	(outflaga));
std::string outflag(
	outflagb.AsString("outflag"));

XlfOper holsb(
	(holsa));
MyArray hols(
	holsb.AsArray("hols"));



XlfOper accrualb(
	(accruala));
std::string accrual(
	accrualb.AsString("accrual"));

double result(
	CLBarrierSmileStrip(
		dtoday,
		dstart,
		dend,
		fwd,
		strike,
		barrier,
		btype,
		atm,
		v90,
		v75,
		v25,
		v10,
		doptexp,
		ir,
		otype,
		mtype,
		outflag,
		hols,
		alpha,
		beta,
		accrual)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
CLSpotBarrierPricerArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dexp","too lazy to comment this one ","B"},
{ "spot","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "barrier","too lazy to comment this one ","B"},
{ "btype","too lazy to comment this one ","XLF_OPER"},
{ "atm","too lazy to comment this one ","B"},
{ "doptexp","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "div","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "mtype","too lazy to comment this one ","XLF_OPER"},
{ "outflag","too lazy to comment this one ","XLF_OPER"},
{ "accrual","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerCLSpotBarrierPricer("xlCLSpotBarrierPricer",
"CLSpotBarrierPricer",
"too lazy to comment this function ",
LibraryName,
CLSpotBarrierPricerArgs,
14
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlCLSpotBarrierPricer(
double dtoday,
double dexp,
double spot,
double strike,
double barrier,
LPXLFOPER btypea,
double atm,
double doptexp,
double ir,
double div,
LPXLFOPER otypea,
LPXLFOPER mtypea,
LPXLFOPER outflaga,
LPXLFOPER accruala)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);






XlfOper btypeb(
	(btypea));
std::string btype(
	btypeb.AsString("btype"));





XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

XlfOper mtypeb(
	(mtypea));
std::string mtype(
	mtypeb.AsString("mtype"));

XlfOper outflagb(
	(outflaga));
std::string outflag(
	outflagb.AsString("outflag"));

XlfOper accrualb(
	(accruala));
std::string accrual(
	accrualb.AsString("accrual"));

double result(
	CLSpotBarrierPricer(
		dtoday,
		dexp,
		spot,
		strike,
		barrier,
		btype,
		atm,
		doptexp,
		ir,
		div,
		otype,
		mtype,
		outflag,
		accrual)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
CLSpotBarrierStripArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dstart","too lazy to comment this one ","B"},
{ "dend","too lazy to comment this one ","B"},
{ "spot","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "barrier","too lazy to comment this one ","B"},
{ "btype","too lazy to comment this one ","XLF_OPER"},
{ "atm","too lazy to comment this one ","B"},
{ "doptexp","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "div","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "mtype","too lazy to comment this one ","XLF_OPER"},
{ "outflag","too lazy to comment this one ","XLF_OPER"},
{ "hols","too lazy to comment this one ","XLF_OPER"},
{ "accrual","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerCLSpotBarrierStrip("xlCLSpotBarrierStrip",
"CLSpotBarrierStrip",
"too lazy to comment this function ",
LibraryName,
CLSpotBarrierStripArgs,
16
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlCLSpotBarrierStrip(
double dtoday,
double dstart,
double dend,
double spot,
double strike,
double barrier,
LPXLFOPER btypea,
double atm,
double doptexp,
double ir,
double div,
LPXLFOPER otypea,
LPXLFOPER mtypea,
LPXLFOPER outflaga,
LPXLFOPER holsa,
LPXLFOPER accruala)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);







XlfOper btypeb(
	(btypea));
std::string btype(
	btypeb.AsString("btype"));





XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

XlfOper mtypeb(
	(mtypea));
std::string mtype(
	mtypeb.AsString("mtype"));

XlfOper outflagb(
	(outflaga));
std::string outflag(
	outflagb.AsString("outflag"));

XlfOper holsb(
	(holsa));
MyArray hols(
	holsb.AsArray("hols"));

XlfOper accrualb(
	(accruala));
std::string accrual(
	accrualb.AsString("accrual"));

double result(
	CLSpotBarrierStrip(
		dtoday,
		dstart,
		dend,
		spot,
		strike,
		barrier,
		btype,
		atm,
		doptexp,
		ir,
		div,
		otype,
		mtype,
		outflag,
		hols,
		accrual)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
CLFXEuroOptPricerArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dexp","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "atm","too lazy to comment this one ","B"},
{ "doptexp","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "fxFwdTenors","too lazy to comment this one ","XLF_OPER"},
{ "fxFwds","too lazy to comment this one ","XLF_OPER"},
{ "fxVolTenors","too lazy to comment this one ","XLF_OPER"},
{ "fxVols","too lazy to comment this one ","XLF_OPER"},
{ "corr","too lazy to comment this one ","B"},
{ "outflag","too lazy to comment this one ","XLF_OPER"},
{ "alpha","too lazy to comment this one ","B"},
{ "beta","too lazy to comment this one ","B"},
{ "accrual","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerCLFXEuroOptPricer("xlCLFXEuroOptPricer",
"CLFXEuroOptPricer",
"too lazy to comment this function ",
LibraryName,
CLFXEuroOptPricerArgs,
17
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlCLFXEuroOptPricer(
double dtoday,
double dexp,
double fwd,
double strike,
double atm,
double doptexp,
double ir,
LPXLFOPER otypea,
LPXLFOPER fxFwdTenorsa,
LPXLFOPER fxFwdsa,
LPXLFOPER fxVolTenorsa,
LPXLFOPER fxVolsa,
double corr,
LPXLFOPER outflaga,
double alpha,
double beta,
LPXLFOPER accruala)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);








XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

XlfOper fxFwdTenorsb(
	(fxFwdTenorsa));
MyArray fxFwdTenors(
	fxFwdTenorsb.AsArray("fxFwdTenors"));

XlfOper fxFwdsb(
	(fxFwdsa));
MyArray fxFwds(
	fxFwdsb.AsArray("fxFwds"));

XlfOper fxVolTenorsb(
	(fxVolTenorsa));
MyArray fxVolTenors(
	fxVolTenorsb.AsArray("fxVolTenors"));

XlfOper fxVolsb(
	(fxVolsa));
MyArray fxVols(
	fxVolsb.AsArray("fxVols"));


XlfOper outflagb(
	(outflaga));
std::string outflag(
	outflagb.AsString("outflag"));



XlfOper accrualb(
	(accruala));
std::string accrual(
	accrualb.AsString("accrual"));

double result(
	CLFXEuroOptPricer(
		dtoday,
		dexp,
		fwd,
		strike,
		atm,
		doptexp,
		ir,
		otype,
		fxFwdTenors,
		fxFwds,
		fxVolTenors,
		fxVols,
		corr,
		outflag,
		alpha,
		beta,
		accrual)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
CLFXEuroOptRisksArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dexp","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "atm","too lazy to comment this one ","B"},
{ "doptexp","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "fxFwdTenors","too lazy to comment this one ","XLF_OPER"},
{ "fxFwds","too lazy to comment this one ","XLF_OPER"},
{ "fxVolTenors","too lazy to comment this one ","XLF_OPER"},
{ "fxVols","too lazy to comment this one ","XLF_OPER"},
{ "corr","too lazy to comment this one ","B"},
{ "outflag","too lazy to comment this one ","XLF_OPER"},
{ "alpha","too lazy to comment this one ","B"},
{ "beta","too lazy to comment this one ","B"},
{ "accrual","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerCLFXEuroOptRisks("xlCLFXEuroOptRisks",
"CLFXEuroOptRisks",
"too lazy to comment this function ",
LibraryName,
CLFXEuroOptRisksArgs,
17
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlCLFXEuroOptRisks(
double dtoday,
double dexp,
double fwd,
double strike,
double atm,
double doptexp,
double ir,
LPXLFOPER otypea,
LPXLFOPER fxFwdTenorsa,
LPXLFOPER fxFwdsa,
LPXLFOPER fxVolTenorsa,
LPXLFOPER fxVolsa,
double corr,
LPXLFOPER outflaga,
double alpha,
double beta,
LPXLFOPER accruala)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);








XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

XlfOper fxFwdTenorsb(
	(fxFwdTenorsa));
MyArray fxFwdTenors(
	fxFwdTenorsb.AsArray("fxFwdTenors"));

XlfOper fxFwdsb(
	(fxFwdsa));
MyArray fxFwds(
	fxFwdsb.AsArray("fxFwds"));

XlfOper fxVolTenorsb(
	(fxVolTenorsa));
MyArray fxVolTenors(
	fxVolTenorsb.AsArray("fxVolTenors"));

XlfOper fxVolsb(
	(fxVolsa));
MyArray fxVols(
	fxVolsb.AsArray("fxVols"));


XlfOper outflagb(
	(outflaga));
std::string outflag(
	outflagb.AsString("outflag"));



XlfOper accrualb(
	(accruala));
std::string accrual(
	accrualb.AsString("accrual"));

MyArray result(
	CLFXEuroOptRisks(
		dtoday,
		dexp,
		fwd,
		strike,
		atm,
		doptexp,
		ir,
		otype,
		fxFwdTenors,
		fxFwds,
		fxVolTenors,
		fxVols,
		corr,
		outflag,
		alpha,
		beta,
		accrual)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
CLFXEuroStripPricerArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dstart","too lazy to comment this one ","B"},
{ "dend","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "atm","too lazy to comment this one ","B"},
{ "doptexp","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "fxFwdTenors","too lazy to comment this one ","XLF_OPER"},
{ "fxFwds","too lazy to comment this one ","XLF_OPER"},
{ "fxVolTenors","too lazy to comment this one ","XLF_OPER"},
{ "fxVols","too lazy to comment this one ","XLF_OPER"},
{ "corr","too lazy to comment this one ","B"},
{ "outflag","too lazy to comment this one ","XLF_OPER"},
{ "hols","too lazy to comment this one ","XLF_OPER"},
{ "alpha","too lazy to comment this one ","B"},
{ "beta","too lazy to comment this one ","B"},
{ "accrual","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerCLFXEuroStripPricer("xlCLFXEuroStripPricer",
"CLFXEuroStripPricer",
"too lazy to comment this function ",
LibraryName,
CLFXEuroStripPricerArgs,
19
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlCLFXEuroStripPricer(
double dtoday,
double dstart,
double dend,
double fwd,
double strike,
double atm,
double doptexp,
double ir,
LPXLFOPER otypea,
LPXLFOPER fxFwdTenorsa,
LPXLFOPER fxFwdsa,
LPXLFOPER fxVolTenorsa,
LPXLFOPER fxVolsa,
double corr,
LPXLFOPER outflaga,
LPXLFOPER holsa,
double alpha,
double beta,
LPXLFOPER accruala)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);









XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

XlfOper fxFwdTenorsb(
	(fxFwdTenorsa));
MyArray fxFwdTenors(
	fxFwdTenorsb.AsArray("fxFwdTenors"));

XlfOper fxFwdsb(
	(fxFwdsa));
MyArray fxFwds(
	fxFwdsb.AsArray("fxFwds"));

XlfOper fxVolTenorsb(
	(fxVolTenorsa));
MyArray fxVolTenors(
	fxVolTenorsb.AsArray("fxVolTenors"));

XlfOper fxVolsb(
	(fxVolsa));
MyArray fxVols(
	fxVolsb.AsArray("fxVols"));


XlfOper outflagb(
	(outflaga));
std::string outflag(
	outflagb.AsString("outflag"));

XlfOper holsb(
	(holsa));
MyArray hols(
	holsb.AsArray("hols"));



XlfOper accrualb(
	(accruala));
std::string accrual(
	accrualb.AsString("accrual"));

double result(
	CLFXEuroStripPricer(
		dtoday,
		dstart,
		dend,
		fwd,
		strike,
		atm,
		doptexp,
		ir,
		otype,
		fxFwdTenors,
		fxFwds,
		fxVolTenors,
		fxVols,
		corr,
		outflag,
		hols,
		alpha,
		beta,
		accrual)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
CLFXEuroStripRisksArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dstart","too lazy to comment this one ","B"},
{ "dend","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "atm","too lazy to comment this one ","B"},
{ "doptexp","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "fxFwdTenors","too lazy to comment this one ","XLF_OPER"},
{ "fxFwds","too lazy to comment this one ","XLF_OPER"},
{ "fxVolTenors","too lazy to comment this one ","XLF_OPER"},
{ "fxVols","too lazy to comment this one ","XLF_OPER"},
{ "corr","too lazy to comment this one ","B"},
{ "outflag","too lazy to comment this one ","XLF_OPER"},
{ "hols","too lazy to comment this one ","XLF_OPER"},
{ "alpha","too lazy to comment this one ","B"},
{ "beta","too lazy to comment this one ","B"},
{ "accrual","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerCLFXEuroStripRisks("xlCLFXEuroStripRisks",
"CLFXEuroStripRisks",
"too lazy to comment this function ",
LibraryName,
CLFXEuroStripRisksArgs,
19
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlCLFXEuroStripRisks(
double dtoday,
double dstart,
double dend,
double fwd,
double strike,
double atm,
double doptexp,
double ir,
LPXLFOPER otypea,
LPXLFOPER fxFwdTenorsa,
LPXLFOPER fxFwdsa,
LPXLFOPER fxVolTenorsa,
LPXLFOPER fxVolsa,
double corr,
LPXLFOPER outflaga,
LPXLFOPER holsa,
double alpha,
double beta,
LPXLFOPER accruala)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);









XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

XlfOper fxFwdTenorsb(
	(fxFwdTenorsa));
MyArray fxFwdTenors(
	fxFwdTenorsb.AsArray("fxFwdTenors"));

XlfOper fxFwdsb(
	(fxFwdsa));
MyArray fxFwds(
	fxFwdsb.AsArray("fxFwds"));

XlfOper fxVolTenorsb(
	(fxVolTenorsa));
MyArray fxVolTenors(
	fxVolTenorsb.AsArray("fxVolTenors"));

XlfOper fxVolsb(
	(fxVolsa));
MyArray fxVols(
	fxVolsb.AsArray("fxVols"));


XlfOper outflagb(
	(outflaga));
std::string outflag(
	outflagb.AsString("outflag"));

XlfOper holsb(
	(holsa));
MyArray hols(
	holsb.AsArray("hols"));



XlfOper accrualb(
	(accruala));
std::string accrual(
	accrualb.AsString("accrual"));

MyArray result(
	CLFXEuroStripRisks(
		dtoday,
		dstart,
		dend,
		fwd,
		strike,
		atm,
		doptexp,
		ir,
		otype,
		fxFwdTenors,
		fxFwds,
		fxVolTenors,
		fxVols,
		corr,
		outflag,
		hols,
		alpha,
		beta,
		accrual)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
CLFXBinOptPricerArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dexp","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "atm","too lazy to comment this one ","B"},
{ "doptexp","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "fxFwdTenors","too lazy to comment this one ","XLF_OPER"},
{ "fxFwds","too lazy to comment this one ","XLF_OPER"},
{ "fxVolTenors","too lazy to comment this one ","XLF_OPER"},
{ "fxVols","too lazy to comment this one ","XLF_OPER"},
{ "corr","too lazy to comment this one ","B"},
{ "outflag","too lazy to comment this one ","XLF_OPER"},
{ "alpha","too lazy to comment this one ","B"},
{ "beta","too lazy to comment this one ","B"},
{ "accrual","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerCLFXBinOptPricer("xlCLFXBinOptPricer",
"CLFXBinOptPricer",
"too lazy to comment this function ",
LibraryName,
CLFXBinOptPricerArgs,
17
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlCLFXBinOptPricer(
double dtoday,
double dexp,
double fwd,
double strike,
double atm,
double doptexp,
double ir,
LPXLFOPER otypea,
LPXLFOPER fxFwdTenorsa,
LPXLFOPER fxFwdsa,
LPXLFOPER fxVolTenorsa,
LPXLFOPER fxVolsa,
double corr,
LPXLFOPER outflaga,
double alpha,
double beta,
LPXLFOPER accruala)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);








XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

XlfOper fxFwdTenorsb(
	(fxFwdTenorsa));
MyArray fxFwdTenors(
	fxFwdTenorsb.AsArray("fxFwdTenors"));

XlfOper fxFwdsb(
	(fxFwdsa));
MyArray fxFwds(
	fxFwdsb.AsArray("fxFwds"));

XlfOper fxVolTenorsb(
	(fxVolTenorsa));
MyArray fxVolTenors(
	fxVolTenorsb.AsArray("fxVolTenors"));

XlfOper fxVolsb(
	(fxVolsa));
MyArray fxVols(
	fxVolsb.AsArray("fxVols"));


XlfOper outflagb(
	(outflaga));
std::string outflag(
	outflagb.AsString("outflag"));



XlfOper accrualb(
	(accruala));
std::string accrual(
	accrualb.AsString("accrual"));

double result(
	CLFXBinOptPricer(
		dtoday,
		dexp,
		fwd,
		strike,
		atm,
		doptexp,
		ir,
		otype,
		fxFwdTenors,
		fxFwds,
		fxVolTenors,
		fxVols,
		corr,
		outflag,
		alpha,
		beta,
		accrual)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
CLFXBinOptRisksArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dexp","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "atm","too lazy to comment this one ","B"},
{ "doptexp","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "fxFwdTenors","too lazy to comment this one ","XLF_OPER"},
{ "fxFwds","too lazy to comment this one ","XLF_OPER"},
{ "fxVolTenors","too lazy to comment this one ","XLF_OPER"},
{ "fxVols","too lazy to comment this one ","XLF_OPER"},
{ "corr","too lazy to comment this one ","B"},
{ "outflag","too lazy to comment this one ","XLF_OPER"},
{ "alpha","too lazy to comment this one ","B"},
{ "beta","too lazy to comment this one ","B"},
{ "accrual","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerCLFXBinOptRisks("xlCLFXBinOptRisks",
"CLFXBinOptRisks",
"too lazy to comment this function ",
LibraryName,
CLFXBinOptRisksArgs,
17
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlCLFXBinOptRisks(
double dtoday,
double dexp,
double fwd,
double strike,
double atm,
double doptexp,
double ir,
LPXLFOPER otypea,
LPXLFOPER fxFwdTenorsa,
LPXLFOPER fxFwdsa,
LPXLFOPER fxVolTenorsa,
LPXLFOPER fxVolsa,
double corr,
LPXLFOPER outflaga,
double alpha,
double beta,
LPXLFOPER accruala)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);








XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

XlfOper fxFwdTenorsb(
	(fxFwdTenorsa));
MyArray fxFwdTenors(
	fxFwdTenorsb.AsArray("fxFwdTenors"));

XlfOper fxFwdsb(
	(fxFwdsa));
MyArray fxFwds(
	fxFwdsb.AsArray("fxFwds"));

XlfOper fxVolTenorsb(
	(fxVolTenorsa));
MyArray fxVolTenors(
	fxVolTenorsb.AsArray("fxVolTenors"));

XlfOper fxVolsb(
	(fxVolsa));
MyArray fxVols(
	fxVolsb.AsArray("fxVols"));


XlfOper outflagb(
	(outflaga));
std::string outflag(
	outflagb.AsString("outflag"));



XlfOper accrualb(
	(accruala));
std::string accrual(
	accrualb.AsString("accrual"));

MyArray result(
	CLFXBinOptRisks(
		dtoday,
		dexp,
		fwd,
		strike,
		atm,
		doptexp,
		ir,
		otype,
		fxFwdTenors,
		fxFwds,
		fxVolTenors,
		fxVols,
		corr,
		outflag,
		alpha,
		beta,
		accrual)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
CLFXBinStripPricerArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dstart","too lazy to comment this one ","B"},
{ "dend","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "atm","too lazy to comment this one ","B"},
{ "doptexp","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "fxFwdTenors","too lazy to comment this one ","XLF_OPER"},
{ "fxFwds","too lazy to comment this one ","XLF_OPER"},
{ "fxVolTenors","too lazy to comment this one ","XLF_OPER"},
{ "fxVols","too lazy to comment this one ","XLF_OPER"},
{ "corr","too lazy to comment this one ","B"},
{ "outflag","too lazy to comment this one ","XLF_OPER"},
{ "hols","too lazy to comment this one ","XLF_OPER"},
{ "alpha","too lazy to comment this one ","B"},
{ "beta","too lazy to comment this one ","B"},
{ "accrual","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerCLFXBinStripPricer("xlCLFXBinStripPricer",
"CLFXBinStripPricer",
"too lazy to comment this function ",
LibraryName,
CLFXBinStripPricerArgs,
19
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlCLFXBinStripPricer(
double dtoday,
double dstart,
double dend,
double fwd,
double strike,
double atm,
double doptexp,
double ir,
LPXLFOPER otypea,
LPXLFOPER fxFwdTenorsa,
LPXLFOPER fxFwdsa,
LPXLFOPER fxVolTenorsa,
LPXLFOPER fxVolsa,
double corr,
LPXLFOPER outflaga,
LPXLFOPER holsa,
double alpha,
double beta,
LPXLFOPER accruala)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);









XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

XlfOper fxFwdTenorsb(
	(fxFwdTenorsa));
MyArray fxFwdTenors(
	fxFwdTenorsb.AsArray("fxFwdTenors"));

XlfOper fxFwdsb(
	(fxFwdsa));
MyArray fxFwds(
	fxFwdsb.AsArray("fxFwds"));

XlfOper fxVolTenorsb(
	(fxVolTenorsa));
MyArray fxVolTenors(
	fxVolTenorsb.AsArray("fxVolTenors"));

XlfOper fxVolsb(
	(fxVolsa));
MyArray fxVols(
	fxVolsb.AsArray("fxVols"));


XlfOper outflagb(
	(outflaga));
std::string outflag(
	outflagb.AsString("outflag"));

XlfOper holsb(
	(holsa));
MyArray hols(
	holsb.AsArray("hols"));



XlfOper accrualb(
	(accruala));
std::string accrual(
	accrualb.AsString("accrual"));

double result(
	CLFXBinStripPricer(
		dtoday,
		dstart,
		dend,
		fwd,
		strike,
		atm,
		doptexp,
		ir,
		otype,
		fxFwdTenors,
		fxFwds,
		fxVolTenors,
		fxVols,
		corr,
		outflag,
		hols,
		alpha,
		beta,
		accrual)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
CLFXBinStripRisksArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dstart","too lazy to comment this one ","B"},
{ "dend","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "atm","too lazy to comment this one ","B"},
{ "doptexp","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "fxFwdTenors","too lazy to comment this one ","XLF_OPER"},
{ "fxFwds","too lazy to comment this one ","XLF_OPER"},
{ "fxVolTenors","too lazy to comment this one ","XLF_OPER"},
{ "fxVols","too lazy to comment this one ","XLF_OPER"},
{ "corr","too lazy to comment this one ","B"},
{ "outflag","too lazy to comment this one ","XLF_OPER"},
{ "hols","too lazy to comment this one ","XLF_OPER"},
{ "alpha","too lazy to comment this one ","B"},
{ "beta","too lazy to comment this one ","B"},
{ "accrual","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerCLFXBinStripRisks("xlCLFXBinStripRisks",
"CLFXBinStripRisks",
"too lazy to comment this function ",
LibraryName,
CLFXBinStripRisksArgs,
19
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlCLFXBinStripRisks(
double dtoday,
double dstart,
double dend,
double fwd,
double strike,
double atm,
double doptexp,
double ir,
LPXLFOPER otypea,
LPXLFOPER fxFwdTenorsa,
LPXLFOPER fxFwdsa,
LPXLFOPER fxVolTenorsa,
LPXLFOPER fxVolsa,
double corr,
LPXLFOPER outflaga,
LPXLFOPER holsa,
double alpha,
double beta,
LPXLFOPER accruala)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);









XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

XlfOper fxFwdTenorsb(
	(fxFwdTenorsa));
MyArray fxFwdTenors(
	fxFwdTenorsb.AsArray("fxFwdTenors"));

XlfOper fxFwdsb(
	(fxFwdsa));
MyArray fxFwds(
	fxFwdsb.AsArray("fxFwds"));

XlfOper fxVolTenorsb(
	(fxVolTenorsa));
MyArray fxVolTenors(
	fxVolTenorsb.AsArray("fxVolTenors"));

XlfOper fxVolsb(
	(fxVolsa));
MyArray fxVols(
	fxVolsb.AsArray("fxVols"));


XlfOper outflagb(
	(outflaga));
std::string outflag(
	outflagb.AsString("outflag"));

XlfOper holsb(
	(holsa));
MyArray hols(
	holsb.AsArray("hols"));



XlfOper accrualb(
	(accruala));
std::string accrual(
	accrualb.AsString("accrual"));

MyArray result(
	CLFXBinStripRisks(
		dtoday,
		dstart,
		dend,
		fwd,
		strike,
		atm,
		doptexp,
		ir,
		otype,
		fxFwdTenors,
		fxFwds,
		fxVolTenors,
		fxVols,
		corr,
		outflag,
		hols,
		alpha,
		beta,
		accrual)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

//////////////////////////
// Methods that will get registered to execute in AutoOpen
//////////////////////////

//////////////////////////
// Methods that will get registered to execute in AutoClose
//////////////////////////

