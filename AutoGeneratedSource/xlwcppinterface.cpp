//// 
//// Autogenerated by xlw 
//// Do not edit this file, it will be overwritten 
//// by InterfaceGenerator 
////

#include "xlw/MyContainers.h"
#include <xlw/CellMatrix.h>
#include "mxlwcppinterface.h"
#include <xlw/xlw.h>
#include <xlw/XlFunctionRegistration.h>
#include <stdexcept>
#include <xlw/XlOpenClose.h>
#include <xlw/HiResTimer.h>
using namespace xlw;

namespace {
const char* LibraryName = "MyTestLibrary";
};


// registrations start here


namespace
{
XLRegistration::Arg
mxlw_CLFitDelta5VolParamsArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dexp","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strikeList","too lazy to comment this one ","XLF_OPER"},
{ "volList","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_CLFitDelta5VolParams("xlmxlw_CLFitDelta5VolParams",
"CLFitDelta5VolParams",
"too lazy to comment this function ",
LibraryName,
mxlw_CLFitDelta5VolParamsArgs,
5
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_CLFitDelta5VolParams(
double dtoday,
double dexp,
double fwd,
LPXLFOPER strikeLista,
LPXLFOPER volLista)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);




XlfOper strikeListb(
	(strikeLista));
MyArray strikeList(
	strikeListb.AsArray("strikeList"));

XlfOper volListb(
	(volLista));
MyArray volList(
	volListb.AsArray("volList"));

MyArray result(
	mxlw_CLFitDelta5VolParams(
		dtoday,
		dexp,
		fwd,
		strikeList,
		volList)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_CLSmileVolbyStrikeArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dexp","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "atm","too lazy to comment this one ","B"},
{ "v90","too lazy to comment this one ","B"},
{ "v75","too lazy to comment this one ","B"},
{ "v25","too lazy to comment this one ","B"},
{ "v10","too lazy to comment this one ","B"},
{ "K","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_CLSmileVolbyStrike("xlmxlw_CLSmileVolbyStrike",
"CLSmileVolbyStrike",
"too lazy to comment this function ",
LibraryName,
mxlw_CLSmileVolbyStrikeArgs,
9
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_CLSmileVolbyStrike(
double dtoday,
double dexp,
double fwd,
double atm,
double v90,
double v75,
double v25,
double v10,
double K)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);










double result(
	mxlw_CLSmileVolbyStrike(
		dtoday,
		dexp,
		fwd,
		atm,
		v90,
		v75,
		v25,
		v10,
		K)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_CLSmileVolbyDeltaArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dexp","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "atm","too lazy to comment this one ","B"},
{ "v90","too lazy to comment this one ","B"},
{ "v75","too lazy to comment this one ","B"},
{ "v25","too lazy to comment this one ","B"},
{ "v10","too lazy to comment this one ","B"},
{ "delta","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_CLSmileVolbyDelta("xlmxlw_CLSmileVolbyDelta",
"CLSmileVolbyDelta",
"too lazy to comment this function ",
LibraryName,
mxlw_CLSmileVolbyDeltaArgs,
9
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_CLSmileVolbyDelta(
double dtoday,
double dexp,
double fwd,
double atm,
double v90,
double v75,
double v25,
double v10,
double delta)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);










double result(
	mxlw_CLSmileVolbyDelta(
		dtoday,
		dexp,
		fwd,
		atm,
		v90,
		v75,
		v25,
		v10,
		delta)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_CLSmileEuroOptPricerArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dexp","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "atm","too lazy to comment this one ","B"},
{ "v90","too lazy to comment this one ","B"},
{ "v75","too lazy to comment this one ","B"},
{ "v25","too lazy to comment this one ","B"},
{ "v10","too lazy to comment this one ","B"},
{ "doptexp","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "outflag","too lazy to comment this one ","XLF_OPER"},
{ "alpha","too lazy to comment this one ","B"},
{ "beta","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_CLSmileEuroOptPricer("xlmxlw_CLSmileEuroOptPricer",
"CLSmileEuroOptPricer",
"too lazy to comment this function ",
LibraryName,
mxlw_CLSmileEuroOptPricerArgs,
15
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_CLSmileEuroOptPricer(
double dtoday,
double dexp,
double fwd,
double strike,
double atm,
double v90,
double v75,
double v25,
double v10,
double doptexp,
double ir,
LPXLFOPER otypea,
LPXLFOPER outflaga,
double alpha,
double beta)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);












XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

XlfOper outflagb(
	(outflaga));
std::string outflag(
	outflagb.AsString("outflag"));



double result(
	mxlw_CLSmileEuroOptPricer(
		dtoday,
		dexp,
		fwd,
		strike,
		atm,
		v90,
		v75,
		v25,
		v10,
		doptexp,
		ir,
		otype,
		outflag,
		alpha,
		beta)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_CLEuroOptStripPricerArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dstart","too lazy to comment this one ","B"},
{ "dend","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "atm","too lazy to comment this one ","B"},
{ "v90","too lazy to comment this one ","B"},
{ "v75","too lazy to comment this one ","B"},
{ "v25","too lazy to comment this one ","B"},
{ "v10","too lazy to comment this one ","B"},
{ "doptexp","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "outflag","too lazy to comment this one ","XLF_OPER"},
{ "hols","too lazy to comment this one ","XLF_OPER"},
{ "alpha","too lazy to comment this one ","B"},
{ "beta","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_CLEuroOptStripPricer("xlmxlw_CLEuroOptStripPricer",
"CLEuroOptStripPricer",
"too lazy to comment this function ",
LibraryName,
mxlw_CLEuroOptStripPricerArgs,
17
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_CLEuroOptStripPricer(
double dtoday,
double dstart,
double dend,
double fwd,
double strike,
double atm,
double v90,
double v75,
double v25,
double v10,
double doptexp,
double ir,
LPXLFOPER otypea,
LPXLFOPER outflaga,
LPXLFOPER holsa,
double alpha,
double beta)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);













XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

XlfOper outflagb(
	(outflaga));
std::string outflag(
	outflagb.AsString("outflag"));

XlfOper holsb(
	(holsa));
MyArray hols(
	holsb.AsArray("hols"));



double result(
	mxlw_CLEuroOptStripPricer(
		dtoday,
		dstart,
		dend,
		fwd,
		strike,
		atm,
		v90,
		v75,
		v25,
		v10,
		doptexp,
		ir,
		otype,
		outflag,
		hols,
		alpha,
		beta)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_CLSmileBinOptPricerArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dexp","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "atm","too lazy to comment this one ","B"},
{ "v90","too lazy to comment this one ","B"},
{ "v75","too lazy to comment this one ","B"},
{ "v25","too lazy to comment this one ","B"},
{ "v10","too lazy to comment this one ","B"},
{ "doptexp","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "outflag","too lazy to comment this one ","XLF_OPER"},
{ "alpha","too lazy to comment this one ","B"},
{ "beta","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_CLSmileBinOptPricer("xlmxlw_CLSmileBinOptPricer",
"CLSmileBinOptPricer",
"too lazy to comment this function ",
LibraryName,
mxlw_CLSmileBinOptPricerArgs,
15
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_CLSmileBinOptPricer(
double dtoday,
double dexp,
double fwd,
double strike,
double atm,
double v90,
double v75,
double v25,
double v10,
double doptexp,
double ir,
LPXLFOPER otypea,
LPXLFOPER outflaga,
double alpha,
double beta)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);












XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

XlfOper outflagb(
	(outflaga));
std::string outflag(
	outflagb.AsString("outflag"));



double result(
	mxlw_CLSmileBinOptPricer(
		dtoday,
		dexp,
		fwd,
		strike,
		atm,
		v90,
		v75,
		v25,
		v10,
		doptexp,
		ir,
		otype,
		outflag,
		alpha,
		beta)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_CLDigitalStripPricerArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dstart","too lazy to comment this one ","B"},
{ "dend","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "atm","too lazy to comment this one ","B"},
{ "v90","too lazy to comment this one ","B"},
{ "v75","too lazy to comment this one ","B"},
{ "v25","too lazy to comment this one ","B"},
{ "v10","too lazy to comment this one ","B"},
{ "doptexp","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "outflag","too lazy to comment this one ","XLF_OPER"},
{ "hols","too lazy to comment this one ","XLF_OPER"},
{ "alpha","too lazy to comment this one ","B"},
{ "beta","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_CLDigitalStripPricer("xlmxlw_CLDigitalStripPricer",
"CLDigitalStripPricer",
"too lazy to comment this function ",
LibraryName,
mxlw_CLDigitalStripPricerArgs,
17
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_CLDigitalStripPricer(
double dtoday,
double dstart,
double dend,
double fwd,
double strike,
double atm,
double v90,
double v75,
double v25,
double v10,
double doptexp,
double ir,
LPXLFOPER otypea,
LPXLFOPER outflaga,
LPXLFOPER holsa,
double alpha,
double beta)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);













XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

XlfOper outflagb(
	(outflaga));
std::string outflag(
	outflagb.AsString("outflag"));

XlfOper holsb(
	(holsa));
MyArray hols(
	holsb.AsArray("hols"));



double result(
	mxlw_CLDigitalStripPricer(
		dtoday,
		dstart,
		dend,
		fwd,
		strike,
		atm,
		v90,
		v75,
		v25,
		v10,
		doptexp,
		ir,
		otype,
		outflag,
		hols,
		alpha,
		beta)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_CLSprdOptPricerArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dexp","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "atm","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "outflag","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_CLSprdOptPricer("xlmxlw_CLSprdOptPricer",
"CLSprdOptPricer",
"too lazy to comment this function ",
LibraryName,
mxlw_CLSprdOptPricerArgs,
8
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_CLSprdOptPricer(
double dtoday,
double dexp,
double fwd,
double strike,
double atm,
double ir,
LPXLFOPER otypea,
LPXLFOPER outflaga)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);







XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

XlfOper outflagb(
	(outflaga));
std::string outflag(
	outflagb.AsString("outflag"));

double result(
	mxlw_CLSprdOptPricer(
		dtoday,
		dexp,
		fwd,
		strike,
		atm,
		ir,
		otype,
		outflag)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_CLBlackImpliedVolArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dexp","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "optPrice","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_CLBlackImpliedVol("xlmxlw_CLBlackImpliedVol",
"CLBlackImpliedVol",
"too lazy to comment this function ",
LibraryName,
mxlw_CLBlackImpliedVolArgs,
7
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_CLBlackImpliedVol(
double dtoday,
double dexp,
double fwd,
double strike,
double ir,
LPXLFOPER otypea,
double optPrice)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);






XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));


double result(
	mxlw_CLBlackImpliedVol(
		dtoday,
		dexp,
		fwd,
		strike,
		ir,
		otype,
		optPrice)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_CLBachelierImpliedVolArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dexp","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "prem","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_CLBachelierImpliedVol("xlmxlw_CLBachelierImpliedVol",
"CLBachelierImpliedVol",
"too lazy to comment this function ",
LibraryName,
mxlw_CLBachelierImpliedVolArgs,
7
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_CLBachelierImpliedVol(
double dtoday,
double dexp,
double fwd,
double strike,
double ir,
LPXLFOPER otypea,
double prem)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);






XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));


double result(
	mxlw_CLBachelierImpliedVol(
		dtoday,
		dexp,
		fwd,
		strike,
		ir,
		otype,
		prem)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_CLBlackDeltaArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dexp","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "vol","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_CLBlackDelta("xlmxlw_CLBlackDelta",
"CLBlackDelta",
"too lazy to comment this function ",
LibraryName,
mxlw_CLBlackDeltaArgs,
7
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_CLBlackDelta(
double dtoday,
double dexp,
double fwd,
double strike,
double vol,
double ir,
LPXLFOPER otypea)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);







XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

double result(
	mxlw_CLBlackDelta(
		dtoday,
		dexp,
		fwd,
		strike,
		vol,
		ir,
		otype)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_CLBarrierOptFlatVolPricerArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dexp","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "barrier","too lazy to comment this one ","B"},
{ "btype","too lazy to comment this one ","XLF_OPER"},
{ "atm","too lazy to comment this one ","B"},
{ "doptexp","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "mtype","too lazy to comment this one ","XLF_OPER"},
{ "outflag","too lazy to comment this one ","XLF_OPER"},
{ "alpha","too lazy to comment this one ","B"},
{ "beta","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_CLBarrierOptFlatVolPricer("xlmxlw_CLBarrierOptFlatVolPricer",
"CLBarrierOptFlatVolPricer",
"too lazy to comment this function ",
LibraryName,
mxlw_CLBarrierOptFlatVolPricerArgs,
14
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_CLBarrierOptFlatVolPricer(
double dtoday,
double dexp,
double fwd,
double strike,
double barrier,
LPXLFOPER btypea,
double atm,
double doptexp,
double ir,
LPXLFOPER otypea,
LPXLFOPER mtypea,
LPXLFOPER outflaga,
double alpha,
double beta)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);






XlfOper btypeb(
	(btypea));
std::string btype(
	btypeb.AsString("btype"));




XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

XlfOper mtypeb(
	(mtypea));
std::string mtype(
	mtypeb.AsString("mtype"));

XlfOper outflagb(
	(outflaga));
std::string outflag(
	outflagb.AsString("outflag"));



double result(
	mxlw_CLBarrierOptFlatVolPricer(
		dtoday,
		dexp,
		fwd,
		strike,
		barrier,
		btype,
		atm,
		doptexp,
		ir,
		otype,
		mtype,
		outflag,
		alpha,
		beta)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_CLBarrierOptSmilePricerArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dexp","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "barrier","too lazy to comment this one ","B"},
{ "btype","too lazy to comment this one ","XLF_OPER"},
{ "atm","too lazy to comment this one ","B"},
{ "v90","too lazy to comment this one ","B"},
{ "v75","too lazy to comment this one ","B"},
{ "v25","too lazy to comment this one ","B"},
{ "v10","too lazy to comment this one ","B"},
{ "doptexp","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "mtype","too lazy to comment this one ","XLF_OPER"},
{ "outflag","too lazy to comment this one ","XLF_OPER"},
{ "alpha","too lazy to comment this one ","B"},
{ "beta","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_CLBarrierOptSmilePricer("xlmxlw_CLBarrierOptSmilePricer",
"CLBarrierOptSmilePricer",
"too lazy to comment this function ",
LibraryName,
mxlw_CLBarrierOptSmilePricerArgs,
18
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_CLBarrierOptSmilePricer(
double dtoday,
double dexp,
double fwd,
double strike,
double barrier,
LPXLFOPER btypea,
double atm,
double v90,
double v75,
double v25,
double v10,
double doptexp,
double ir,
LPXLFOPER otypea,
LPXLFOPER mtypea,
LPXLFOPER outflaga,
double alpha,
double beta)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);






XlfOper btypeb(
	(btypea));
std::string btype(
	btypeb.AsString("btype"));








XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

XlfOper mtypeb(
	(mtypea));
std::string mtype(
	mtypeb.AsString("mtype"));

XlfOper outflagb(
	(outflaga));
std::string outflag(
	outflagb.AsString("outflag"));



double result(
	mxlw_CLBarrierOptSmilePricer(
		dtoday,
		dexp,
		fwd,
		strike,
		barrier,
		btype,
		atm,
		v90,
		v75,
		v25,
		v10,
		doptexp,
		ir,
		otype,
		mtype,
		outflag,
		alpha,
		beta)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_CLBarrierStripPricerArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dstart","too lazy to comment this one ","B"},
{ "dend","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "barrier","too lazy to comment this one ","B"},
{ "btype","too lazy to comment this one ","XLF_OPER"},
{ "atm","too lazy to comment this one ","B"},
{ "doptexp","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "mtype","too lazy to comment this one ","XLF_OPER"},
{ "outflag","too lazy to comment this one ","XLF_OPER"},
{ "hols","too lazy to comment this one ","XLF_OPER"},
{ "alpha","too lazy to comment this one ","B"},
{ "beta","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_CLBarrierStripPricer("xlmxlw_CLBarrierStripPricer",
"CLBarrierStripPricer",
"too lazy to comment this function ",
LibraryName,
mxlw_CLBarrierStripPricerArgs,
16
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_CLBarrierStripPricer(
double dtoday,
double dstart,
double dend,
double fwd,
double strike,
double barrier,
LPXLFOPER btypea,
double atm,
double doptexp,
double ir,
LPXLFOPER otypea,
LPXLFOPER mtypea,
LPXLFOPER outflaga,
LPXLFOPER holsa,
double alpha,
double beta)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);







XlfOper btypeb(
	(btypea));
std::string btype(
	btypeb.AsString("btype"));




XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

XlfOper mtypeb(
	(mtypea));
std::string mtype(
	mtypeb.AsString("mtype"));

XlfOper outflagb(
	(outflaga));
std::string outflag(
	outflagb.AsString("outflag"));

XlfOper holsb(
	(holsa));
MyArray hols(
	holsb.AsArray("hols"));



double result(
	mxlw_CLBarrierStripPricer(
		dtoday,
		dstart,
		dend,
		fwd,
		strike,
		barrier,
		btype,
		atm,
		doptexp,
		ir,
		otype,
		mtype,
		outflag,
		hols,
		alpha,
		beta)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_CLCalibHistBreakevenVolArgs[]=
{
{ "hostname","too lazy to comment this one ","XLF_OPER"},
{ "dbname","too lazy to comment this one ","XLF_OPER"},
{ "tablename","too lazy to comment this one ","XLF_OPER"},
{ "sprdnum","too lazy to comment this one ","B"},
{ "expbackdays","too lazy to comment this one ","B"},
{ "freq","too lazy to comment this one ","B"},
{ "contDates","too lazy to comment this one ","XLF_OPER"},
{ "out_table","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_CLCalibHistBreakevenVol("xlmxlw_CLCalibHistBreakevenVol",
"CLCalibHistBreakevenVol",
"too lazy to comment this function ",
LibraryName,
mxlw_CLCalibHistBreakevenVolArgs,
8
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_CLCalibHistBreakevenVol(
LPXLFOPER hostnamea,
LPXLFOPER dbnamea,
LPXLFOPER tablenamea,
double sprdnuma,
double expbackdaysa,
double freqa,
LPXLFOPER contDatesa,
LPXLFOPER out_tablea)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper hostnameb(
	(hostnamea));
std::string hostname(
	hostnameb.AsString("hostname"));

XlfOper dbnameb(
	(dbnamea));
std::string dbname(
	dbnameb.AsString("dbname"));

XlfOper tablenameb(
	(tablenamea));
std::string tablename(
	tablenameb.AsString("tablename"));

int sprdnum(
	static_cast<int>(sprdnuma));

int expbackdays(
	static_cast<int>(expbackdaysa));

int freq(
	static_cast<int>(freqa));

XlfOper contDatesb(
	(contDatesa));
MyArray contDates(
	contDatesb.AsArray("contDates"));

XlfOper out_tableb(
	(out_tablea));
std::string out_table(
	out_tableb.AsString("out_table"));

int result(
	mxlw_CLCalibHistBreakevenVol(
		hostname,
		dbname,
		tablename,
		sprdnum,
		expbackdays,
		freq,
		contDates,
		out_table)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_CLFXEuroOptPricerArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dexp","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "atm","too lazy to comment this one ","B"},
{ "doptexp","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "fxFwdTenors","too lazy to comment this one ","XLF_OPER"},
{ "fxFwds","too lazy to comment this one ","XLF_OPER"},
{ "fxVolTenors","too lazy to comment this one ","XLF_OPER"},
{ "fxVols","too lazy to comment this one ","XLF_OPER"},
{ "corr","too lazy to comment this one ","B"},
{ "outflag","too lazy to comment this one ","XLF_OPER"},
{ "alpha","too lazy to comment this one ","B"},
{ "beta","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_CLFXEuroOptPricer("xlmxlw_CLFXEuroOptPricer",
"CLFXEuroOptPricer",
"too lazy to comment this function ",
LibraryName,
mxlw_CLFXEuroOptPricerArgs,
16
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_CLFXEuroOptPricer(
double dtoday,
double dexp,
double fwd,
double strike,
double atm,
double doptexp,
double ir,
LPXLFOPER otypea,
LPXLFOPER fxFwdTenorsa,
LPXLFOPER fxFwdsa,
LPXLFOPER fxVolTenorsa,
LPXLFOPER fxVolsa,
double corr,
LPXLFOPER outflaga,
double alpha,
double beta)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);








XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

XlfOper fxFwdTenorsb(
	(fxFwdTenorsa));
MyArray fxFwdTenors(
	fxFwdTenorsb.AsArray("fxFwdTenors"));

XlfOper fxFwdsb(
	(fxFwdsa));
MyArray fxFwds(
	fxFwdsb.AsArray("fxFwds"));

XlfOper fxVolTenorsb(
	(fxVolTenorsa));
MyArray fxVolTenors(
	fxVolTenorsb.AsArray("fxVolTenors"));

XlfOper fxVolsb(
	(fxVolsa));
MyArray fxVols(
	fxVolsb.AsArray("fxVols"));


XlfOper outflagb(
	(outflaga));
std::string outflag(
	outflagb.AsString("outflag"));



double result(
	mxlw_CLFXEuroOptPricer(
		dtoday,
		dexp,
		fwd,
		strike,
		atm,
		doptexp,
		ir,
		otype,
		fxFwdTenors,
		fxFwds,
		fxVolTenors,
		fxVols,
		corr,
		outflag,
		alpha,
		beta)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_CLFXEuroOptRisksArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dexp","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "atm","too lazy to comment this one ","B"},
{ "doptexp","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "fxFwdTenors","too lazy to comment this one ","XLF_OPER"},
{ "fxFwds","too lazy to comment this one ","XLF_OPER"},
{ "fxVolTenors","too lazy to comment this one ","XLF_OPER"},
{ "fxVols","too lazy to comment this one ","XLF_OPER"},
{ "corr","too lazy to comment this one ","B"},
{ "outflag","too lazy to comment this one ","XLF_OPER"},
{ "alpha","too lazy to comment this one ","B"},
{ "beta","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_CLFXEuroOptRisks("xlmxlw_CLFXEuroOptRisks",
"CLFXEuroOptRisks",
"too lazy to comment this function ",
LibraryName,
mxlw_CLFXEuroOptRisksArgs,
16
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_CLFXEuroOptRisks(
double dtoday,
double dexp,
double fwd,
double strike,
double atm,
double doptexp,
double ir,
LPXLFOPER otypea,
LPXLFOPER fxFwdTenorsa,
LPXLFOPER fxFwdsa,
LPXLFOPER fxVolTenorsa,
LPXLFOPER fxVolsa,
double corr,
LPXLFOPER outflaga,
double alpha,
double beta)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);








XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

XlfOper fxFwdTenorsb(
	(fxFwdTenorsa));
MyArray fxFwdTenors(
	fxFwdTenorsb.AsArray("fxFwdTenors"));

XlfOper fxFwdsb(
	(fxFwdsa));
MyArray fxFwds(
	fxFwdsb.AsArray("fxFwds"));

XlfOper fxVolTenorsb(
	(fxVolTenorsa));
MyArray fxVolTenors(
	fxVolTenorsb.AsArray("fxVolTenors"));

XlfOper fxVolsb(
	(fxVolsa));
MyArray fxVols(
	fxVolsb.AsArray("fxVols"));


XlfOper outflagb(
	(outflaga));
std::string outflag(
	outflagb.AsString("outflag"));



MyArray result(
	mxlw_CLFXEuroOptRisks(
		dtoday,
		dexp,
		fwd,
		strike,
		atm,
		doptexp,
		ir,
		otype,
		fxFwdTenors,
		fxFwds,
		fxVolTenors,
		fxVols,
		corr,
		outflag,
		alpha,
		beta)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_CLFXEuroStripPricerArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dstart","too lazy to comment this one ","B"},
{ "dend","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "atm","too lazy to comment this one ","B"},
{ "doptexp","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "fxFwdTenors","too lazy to comment this one ","XLF_OPER"},
{ "fxFwds","too lazy to comment this one ","XLF_OPER"},
{ "fxVolTenors","too lazy to comment this one ","XLF_OPER"},
{ "fxVols","too lazy to comment this one ","XLF_OPER"},
{ "corr","too lazy to comment this one ","B"},
{ "outflag","too lazy to comment this one ","XLF_OPER"},
{ "hols","too lazy to comment this one ","XLF_OPER"},
{ "alpha","too lazy to comment this one ","B"},
{ "beta","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_CLFXEuroStripPricer("xlmxlw_CLFXEuroStripPricer",
"CLFXEuroStripPricer",
"too lazy to comment this function ",
LibraryName,
mxlw_CLFXEuroStripPricerArgs,
18
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_CLFXEuroStripPricer(
double dtoday,
double dstart,
double dend,
double fwd,
double strike,
double atm,
double doptexp,
double ir,
LPXLFOPER otypea,
LPXLFOPER fxFwdTenorsa,
LPXLFOPER fxFwdsa,
LPXLFOPER fxVolTenorsa,
LPXLFOPER fxVolsa,
double corr,
LPXLFOPER outflaga,
LPXLFOPER holsa,
double alpha,
double beta)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);









XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

XlfOper fxFwdTenorsb(
	(fxFwdTenorsa));
MyArray fxFwdTenors(
	fxFwdTenorsb.AsArray("fxFwdTenors"));

XlfOper fxFwdsb(
	(fxFwdsa));
MyArray fxFwds(
	fxFwdsb.AsArray("fxFwds"));

XlfOper fxVolTenorsb(
	(fxVolTenorsa));
MyArray fxVolTenors(
	fxVolTenorsb.AsArray("fxVolTenors"));

XlfOper fxVolsb(
	(fxVolsa));
MyArray fxVols(
	fxVolsb.AsArray("fxVols"));


XlfOper outflagb(
	(outflaga));
std::string outflag(
	outflagb.AsString("outflag"));

XlfOper holsb(
	(holsa));
MyArray hols(
	holsb.AsArray("hols"));



double result(
	mxlw_CLFXEuroStripPricer(
		dtoday,
		dstart,
		dend,
		fwd,
		strike,
		atm,
		doptexp,
		ir,
		otype,
		fxFwdTenors,
		fxFwds,
		fxVolTenors,
		fxVols,
		corr,
		outflag,
		hols,
		alpha,
		beta)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_CLFXEuroStripRisksArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dstart","too lazy to comment this one ","B"},
{ "dend","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "atm","too lazy to comment this one ","B"},
{ "doptexp","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "fxFwdTenors","too lazy to comment this one ","XLF_OPER"},
{ "fxFwds","too lazy to comment this one ","XLF_OPER"},
{ "fxVolTenors","too lazy to comment this one ","XLF_OPER"},
{ "fxVols","too lazy to comment this one ","XLF_OPER"},
{ "corr","too lazy to comment this one ","B"},
{ "outflag","too lazy to comment this one ","XLF_OPER"},
{ "hols","too lazy to comment this one ","XLF_OPER"},
{ "alpha","too lazy to comment this one ","B"},
{ "beta","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_CLFXEuroStripRisks("xlmxlw_CLFXEuroStripRisks",
"CLFXEuroStripRisks",
"too lazy to comment this function ",
LibraryName,
mxlw_CLFXEuroStripRisksArgs,
18
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_CLFXEuroStripRisks(
double dtoday,
double dstart,
double dend,
double fwd,
double strike,
double atm,
double doptexp,
double ir,
LPXLFOPER otypea,
LPXLFOPER fxFwdTenorsa,
LPXLFOPER fxFwdsa,
LPXLFOPER fxVolTenorsa,
LPXLFOPER fxVolsa,
double corr,
LPXLFOPER outflaga,
LPXLFOPER holsa,
double alpha,
double beta)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);









XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

XlfOper fxFwdTenorsb(
	(fxFwdTenorsa));
MyArray fxFwdTenors(
	fxFwdTenorsb.AsArray("fxFwdTenors"));

XlfOper fxFwdsb(
	(fxFwdsa));
MyArray fxFwds(
	fxFwdsb.AsArray("fxFwds"));

XlfOper fxVolTenorsb(
	(fxVolTenorsa));
MyArray fxVolTenors(
	fxVolTenorsb.AsArray("fxVolTenors"));

XlfOper fxVolsb(
	(fxVolsa));
MyArray fxVols(
	fxVolsb.AsArray("fxVols"));


XlfOper outflagb(
	(outflaga));
std::string outflag(
	outflagb.AsString("outflag"));

XlfOper holsb(
	(holsa));
MyArray hols(
	holsb.AsArray("hols"));



MyArray result(
	mxlw_CLFXEuroStripRisks(
		dtoday,
		dstart,
		dend,
		fwd,
		strike,
		atm,
		doptexp,
		ir,
		otype,
		fxFwdTenors,
		fxFwds,
		fxVolTenors,
		fxVols,
		corr,
		outflag,
		hols,
		alpha,
		beta)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_CLFXBinOptPricerArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dexp","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "atm","too lazy to comment this one ","B"},
{ "doptexp","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "fxFwdTenors","too lazy to comment this one ","XLF_OPER"},
{ "fxFwds","too lazy to comment this one ","XLF_OPER"},
{ "fxVolTenors","too lazy to comment this one ","XLF_OPER"},
{ "fxVols","too lazy to comment this one ","XLF_OPER"},
{ "corr","too lazy to comment this one ","B"},
{ "outflag","too lazy to comment this one ","XLF_OPER"},
{ "alpha","too lazy to comment this one ","B"},
{ "beta","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_CLFXBinOptPricer("xlmxlw_CLFXBinOptPricer",
"CLFXBinOptPricer",
"too lazy to comment this function ",
LibraryName,
mxlw_CLFXBinOptPricerArgs,
16
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_CLFXBinOptPricer(
double dtoday,
double dexp,
double fwd,
double strike,
double atm,
double doptexp,
double ir,
LPXLFOPER otypea,
LPXLFOPER fxFwdTenorsa,
LPXLFOPER fxFwdsa,
LPXLFOPER fxVolTenorsa,
LPXLFOPER fxVolsa,
double corr,
LPXLFOPER outflaga,
double alpha,
double beta)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);








XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

XlfOper fxFwdTenorsb(
	(fxFwdTenorsa));
MyArray fxFwdTenors(
	fxFwdTenorsb.AsArray("fxFwdTenors"));

XlfOper fxFwdsb(
	(fxFwdsa));
MyArray fxFwds(
	fxFwdsb.AsArray("fxFwds"));

XlfOper fxVolTenorsb(
	(fxVolTenorsa));
MyArray fxVolTenors(
	fxVolTenorsb.AsArray("fxVolTenors"));

XlfOper fxVolsb(
	(fxVolsa));
MyArray fxVols(
	fxVolsb.AsArray("fxVols"));


XlfOper outflagb(
	(outflaga));
std::string outflag(
	outflagb.AsString("outflag"));



double result(
	mxlw_CLFXBinOptPricer(
		dtoday,
		dexp,
		fwd,
		strike,
		atm,
		doptexp,
		ir,
		otype,
		fxFwdTenors,
		fxFwds,
		fxVolTenors,
		fxVols,
		corr,
		outflag,
		alpha,
		beta)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_CLFXBinOptRisksArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dexp","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "atm","too lazy to comment this one ","B"},
{ "doptexp","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "fxFwdTenors","too lazy to comment this one ","XLF_OPER"},
{ "fxFwds","too lazy to comment this one ","XLF_OPER"},
{ "fxVolTenors","too lazy to comment this one ","XLF_OPER"},
{ "fxVols","too lazy to comment this one ","XLF_OPER"},
{ "corr","too lazy to comment this one ","B"},
{ "outflag","too lazy to comment this one ","XLF_OPER"},
{ "alpha","too lazy to comment this one ","B"},
{ "beta","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_CLFXBinOptRisks("xlmxlw_CLFXBinOptRisks",
"CLFXBinOptRisks",
"too lazy to comment this function ",
LibraryName,
mxlw_CLFXBinOptRisksArgs,
16
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_CLFXBinOptRisks(
double dtoday,
double dexp,
double fwd,
double strike,
double atm,
double doptexp,
double ir,
LPXLFOPER otypea,
LPXLFOPER fxFwdTenorsa,
LPXLFOPER fxFwdsa,
LPXLFOPER fxVolTenorsa,
LPXLFOPER fxVolsa,
double corr,
LPXLFOPER outflaga,
double alpha,
double beta)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);








XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

XlfOper fxFwdTenorsb(
	(fxFwdTenorsa));
MyArray fxFwdTenors(
	fxFwdTenorsb.AsArray("fxFwdTenors"));

XlfOper fxFwdsb(
	(fxFwdsa));
MyArray fxFwds(
	fxFwdsb.AsArray("fxFwds"));

XlfOper fxVolTenorsb(
	(fxVolTenorsa));
MyArray fxVolTenors(
	fxVolTenorsb.AsArray("fxVolTenors"));

XlfOper fxVolsb(
	(fxVolsa));
MyArray fxVols(
	fxVolsb.AsArray("fxVols"));


XlfOper outflagb(
	(outflaga));
std::string outflag(
	outflagb.AsString("outflag"));



MyArray result(
	mxlw_CLFXBinOptRisks(
		dtoday,
		dexp,
		fwd,
		strike,
		atm,
		doptexp,
		ir,
		otype,
		fxFwdTenors,
		fxFwds,
		fxVolTenors,
		fxVols,
		corr,
		outflag,
		alpha,
		beta)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_CLFXBinStripPricerArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dstart","too lazy to comment this one ","B"},
{ "dend","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "atm","too lazy to comment this one ","B"},
{ "doptexp","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "fxFwdTenors","too lazy to comment this one ","XLF_OPER"},
{ "fxFwds","too lazy to comment this one ","XLF_OPER"},
{ "fxVolTenors","too lazy to comment this one ","XLF_OPER"},
{ "fxVols","too lazy to comment this one ","XLF_OPER"},
{ "corr","too lazy to comment this one ","B"},
{ "outflag","too lazy to comment this one ","XLF_OPER"},
{ "hols","too lazy to comment this one ","XLF_OPER"},
{ "alpha","too lazy to comment this one ","B"},
{ "beta","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_CLFXBinStripPricer("xlmxlw_CLFXBinStripPricer",
"CLFXBinStripPricer",
"too lazy to comment this function ",
LibraryName,
mxlw_CLFXBinStripPricerArgs,
18
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_CLFXBinStripPricer(
double dtoday,
double dstart,
double dend,
double fwd,
double strike,
double atm,
double doptexp,
double ir,
LPXLFOPER otypea,
LPXLFOPER fxFwdTenorsa,
LPXLFOPER fxFwdsa,
LPXLFOPER fxVolTenorsa,
LPXLFOPER fxVolsa,
double corr,
LPXLFOPER outflaga,
LPXLFOPER holsa,
double alpha,
double beta)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);









XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

XlfOper fxFwdTenorsb(
	(fxFwdTenorsa));
MyArray fxFwdTenors(
	fxFwdTenorsb.AsArray("fxFwdTenors"));

XlfOper fxFwdsb(
	(fxFwdsa));
MyArray fxFwds(
	fxFwdsb.AsArray("fxFwds"));

XlfOper fxVolTenorsb(
	(fxVolTenorsa));
MyArray fxVolTenors(
	fxVolTenorsb.AsArray("fxVolTenors"));

XlfOper fxVolsb(
	(fxVolsa));
MyArray fxVols(
	fxVolsb.AsArray("fxVols"));


XlfOper outflagb(
	(outflaga));
std::string outflag(
	outflagb.AsString("outflag"));

XlfOper holsb(
	(holsa));
MyArray hols(
	holsb.AsArray("hols"));



double result(
	mxlw_CLFXBinStripPricer(
		dtoday,
		dstart,
		dend,
		fwd,
		strike,
		atm,
		doptexp,
		ir,
		otype,
		fxFwdTenors,
		fxFwds,
		fxVolTenors,
		fxVols,
		corr,
		outflag,
		hols,
		alpha,
		beta)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_CLFXBinStripRisksArgs[]=
{
{ "dtoday","too lazy to comment this one ","B"},
{ "dstart","too lazy to comment this one ","B"},
{ "dend","too lazy to comment this one ","B"},
{ "fwd","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "atm","too lazy to comment this one ","B"},
{ "doptexp","too lazy to comment this one ","B"},
{ "ir","too lazy to comment this one ","B"},
{ "otype","too lazy to comment this one ","XLF_OPER"},
{ "fxFwdTenors","too lazy to comment this one ","XLF_OPER"},
{ "fxFwds","too lazy to comment this one ","XLF_OPER"},
{ "fxVolTenors","too lazy to comment this one ","XLF_OPER"},
{ "fxVols","too lazy to comment this one ","XLF_OPER"},
{ "corr","too lazy to comment this one ","B"},
{ "outflag","too lazy to comment this one ","XLF_OPER"},
{ "hols","too lazy to comment this one ","XLF_OPER"},
{ "alpha","too lazy to comment this one ","B"},
{ "beta","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_CLFXBinStripRisks("xlmxlw_CLFXBinStripRisks",
"CLFXBinStripRisks",
"too lazy to comment this function ",
LibraryName,
mxlw_CLFXBinStripRisksArgs,
18
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_CLFXBinStripRisks(
double dtoday,
double dstart,
double dend,
double fwd,
double strike,
double atm,
double doptexp,
double ir,
LPXLFOPER otypea,
LPXLFOPER fxFwdTenorsa,
LPXLFOPER fxFwdsa,
LPXLFOPER fxVolTenorsa,
LPXLFOPER fxVolsa,
double corr,
LPXLFOPER outflaga,
LPXLFOPER holsa,
double alpha,
double beta)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);









XlfOper otypeb(
	(otypea));
std::string otype(
	otypeb.AsString("otype"));

XlfOper fxFwdTenorsb(
	(fxFwdTenorsa));
MyArray fxFwdTenors(
	fxFwdTenorsb.AsArray("fxFwdTenors"));

XlfOper fxFwdsb(
	(fxFwdsa));
MyArray fxFwds(
	fxFwdsb.AsArray("fxFwds"));

XlfOper fxVolTenorsb(
	(fxVolTenorsa));
MyArray fxVolTenors(
	fxVolTenorsb.AsArray("fxVolTenors"));

XlfOper fxVolsb(
	(fxVolsa));
MyArray fxVols(
	fxVolsb.AsArray("fxVols"));


XlfOper outflagb(
	(outflaga));
std::string outflag(
	outflagb.AsString("outflag"));

XlfOper holsb(
	(holsa));
MyArray hols(
	holsb.AsArray("hols"));



MyArray result(
	mxlw_CLFXBinStripRisks(
		dtoday,
		dstart,
		dend,
		fwd,
		strike,
		atm,
		doptexp,
		ir,
		otype,
		fxFwdTenors,
		fxFwds,
		fxVolTenors,
		fxVols,
		corr,
		outflag,
		hols,
		alpha,
		beta)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

//////////////////////////
// Methods that will get registered to execute in AutoOpen
//////////////////////////

//////////////////////////
// Methods that will get registered to execute in AutoClose
//////////////////////////

